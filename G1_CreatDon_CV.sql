-- ===============================================================================
-- ===============================================================================    
-- 	 Projet			   : Projet (Partie1) : Exploration des Curriculum-Vitae (CV)               
--   Nom du SGBD/DBMS  : ORACLE  (MySQL/MongoDB/PostGRES/SQLServer...)        
--   Dates             : 17/12/2020 
--   Lieu              : Université Sorbonne Paris Nord, Institut Galiée
--   Auteurs           : Faïza BERHILI, Ammar ALSADIK, Emiliano BOUSSAC, Julian CHAMBRIER
--   Page Web          : http://www.lipn.univ-paris13.fr/~boufares
-- 	 Fichier		   : G1_CreatDon_CV.sql
--   Enseignant		   : Monsieur Faouzi BOUFARES
-- =============================================================================== 
-- Promotion : M2EID2 
-- =============================================================================== 

-- Numéro du Groupe 	--->>>> : G1
-- Numéro des Binôme  	--->>>> : B18/B19
-- NOM1 PRENOM1        	--->>>> : BERHILI Faiza			(B18)
-- NOM2 PRENOM2         --->>>> : BOUSSAC Emiliano		(B18)
-- NOM3 PRENOM3         --->>>> : ALSADIK Ammar  		(B19)
-- NOM4 PRENOM4         --->>>> : CHAMBRIER Julian 		(B19)


-- Suppression des tables 
DROP TABLE CANDIDATS CASCADE CONSTRAINTS;
DROP TABLE ADRESSES CASCADE CONSTRAINTS;
DROP TABLE ETABLISSEMENTSCOLAIRES CASCADE CONSTRAINTS;
DROP TABLE ENTREPRISES CASCADE CONSTRAINTS;
DROP TABLE PROJETS CASCADE CONSTRAINTS;
DROP TABLE LANGUES CASCADE CONSTRAINTS;
DROP TABLE COMPETENCES CASCADE CONSTRAINTS;
DROP TABLE CENTREINTERET CASCADE CONSTRAINTS;
DROP TABLE SITES_RESEAUX CASCADE CONSTRAINTS;
DROP TABLE PERMIS CASCADE CONSTRAINTS;
DROP TABLE DIPLOMES CASCADE CONSTRAINTS;
DROP TABLE CV CASCADE CONSTRAINTS;
DROP TABLE MISSIONS CASCADE CONSTRAINTS;
DROP TABLE EXPERIENCES CASCADE CONSTRAINTS;
DROP TABLE FORMATIONS CASCADE CONSTRAINTS;
DROP TABLE OBTENTIONDIPLOME CASCADE CONSTRAINTS;
DROP TABLE OBTENTIONPERMIS CASCADE CONSTRAINTS;
DROP TABLE RELATION_CENTINT_CAN CASCADE CONSTRAINTS;
DROP TABLE RELATION_COMP_CAN CASCADE CONSTRAINTS;
DROP TABLE RELATION_LANG_CAN CASCADE CONSTRAINTS;
DROP TABLE RELATION_PROJET_CAN CASCADE CONSTRAINTS;
DROP TABLE RELATION_EXP_CAN CASCADE CONSTRAINTS;
DROP TABLE RELATION_EXP_MISS CASCADE CONSTRAINTS;
DROP TABLE SUIT_FORMATIONS CASCADE CONSTRAINTS;
DROP TABLE CATEGORIE_CPT CASCADE CONSTRAINTS;


-- Suppression des méta-tables
DROP TABLE META_CANDIDATS CASCADE CONSTRAINTS;
DROP TABLE META_ADRESSES CASCADE CONSTRAINTS;
DROP TABLE META_ETABLISSEMENTSCOLAIRES CASCADE CONSTRAINTS;
DROP TABLE META_ENTREPRISES CASCADE CONSTRAINTS;
DROP TABLE META_PROJETS CASCADE CONSTRAINTS;
DROP TABLE META_LANGUES CASCADE CONSTRAINTS;
DROP TABLE META_COMPETENCES CASCADE CONSTRAINTS;
DROP TABLE META_CENTREINTERET CASCADE CONSTRAINTS;
DROP TABLE META_SITES_RESEAUX CASCADE CONSTRAINTS;
DROP TABLE META_PERMIS CASCADE CONSTRAINTS;
DROP TABLE META_DIPLOMES CASCADE CONSTRAINTS;
DROP TABLE META_CV CASCADE CONSTRAINTS;
DROP TABLE META_MISSIONS CASCADE CONSTRAINTS;
DROP TABLE META_EXPERIENCES CASCADE CONSTRAINTS;
DROP TABLE META_FORMATIONS CASCADE CONSTRAINTS;
DROP TABLE META_CATEGORIE_CPT CASCADE CONSTRAINTS;


-- Suppression des séquences
DROP SEQUENCE seq_etaSco;
DROP SEQUENCE seq_form;
DROP SEQUENCE seq_dipl;
DROP SEQUENCE seq_exp;
DROP SEQUENCE seq_proj;
DROP SEQUENCE seq_miss;
DROP SEQUENCE seq_ent;


-- Création de séquences pour l'auto-incrémentation de tables 
create sequence seq_etaSco start with 1 increment by 1 nomaxvalue;
create sequence seq_form start with 1 increment by 1 nomaxvalue;
create sequence seq_dipl start with 1 increment by 1 nomaxvalue;
create sequence seq_exp start with 1 increment by 1 nomaxvalue;
create sequence seq_miss start with 1 increment by 1 nomaxvalue;
create sequence seq_ent start with 1 increment by 1 nomaxvalue;
create sequence seq_proj start with 1 increment by 1 nomaxvalue;


ALTER SESSION SET NLS_LANGUAGE=FRENCH;


-- Création des tables

-- Table ADRESSES
CREATE TABLE ADRESSES
(
	IDADR VARCHAR2(150), 
	NUMADR VARCHAR2(150),
	LOCALITEADR VARCHAR2(150),
	NOMRUEADR VARCHAR2(100),
	CPADR VARCHAR2(150),
	VILLEADR VARCHAR2(150),
	PAYSADR VARCHAR2(150),
	CONTINENTADR VARCHAR2(150),
	CONSTRAINT PK_ADRESSES PRIMARY KEY(IDADR)
);

-- Table CANDIDATS
CREATE TABLE CANDIDATS
(
	IDCAN VARCHAR2(150), 
	IDADR VARCHAR2(150),
	NOMCAN VARCHAR2(150),
	PRENOMCAN VARCHAR2(150),
	SEXE CHAR(1),
	AGE NUMBER(3),
	DATENAISSANCE DATE,
	MAILCAN VARCHAR2(150),
	NATIONALITE VARCHAR2(150),
	TELCAN VARCHAR2(150),
	CONSTRAINT PK_CANDIDATS PRIMARY KEY(IDCAN),
	CONSTRAINT FK_CAN_ADR_IDADR FOREIGN KEY(IDADR) REFERENCES ADRESSES(IDADR),
	CONSTRAINT CK_CAN_SEXE CHECK(SEXE IN ('M','F')),
	CONSTRAINT CK_CAN_AGE CHECK(AGE >= 0)
);

-- Table ETABLISSEMENTSCOLAIRES
CREATE TABLE ETABLISSEMENTSCOLAIRES
(
	IDETASCO VARCHAR2(150), 
	IDADR VARCHAR2(150),
	NOMETASCO VARCHAR2(150),
	MAILETASCO VARCHAR2(150),
	TELETASCO VARCHAR2(150),
	CONSTRAINT PK_ETASCO PRIMARY KEY(IDETASCO),
	CONSTRAINT FK_ETBSCO_ADR_IDADR FOREIGN KEY(IDADR) REFERENCES ADRESSES(IDADR)
);

-- Table ENTREPRISES
CREATE TABLE ENTREPRISES
(
	IDENT VARCHAR2(150), 
	IDADR VARCHAR2(150),
	NOMENT VARCHAR2(150),
	MAILENT VARCHAR2(150),
	TELENT VARCHAR2(150),
	CONSTRAINT PK_ENTREPRISES PRIMARY KEY(IDENT),
	CONSTRAINT FK_ENT_ADR_IDADR FOREIGN KEY(IDADR) REFERENCES ADRESSES(IDADR)
);

CREATE TABLE PROJETS
(
	IDPROJ VARCHAR2(150), 
	IDETASCO VARCHAR2(150),
	NOMPROJ VARCHAR2(150),
	DESCRIPTIFPROJ VARCHAR2(150),
	CONSTRAINT PK_PROJETS PRIMARY KEY(IDPROJ),
	CONSTRAINT FK_PROJET_ETBSCO_IDETASCO FOREIGN KEY(IDETASCO) REFERENCES ETABLISSEMENTSCOLAIRES(IDETASCO)
);

-- Table LANGUES
CREATE TABLE LANGUES
(
	NOMLANGUE VARCHAR2(150),
	CONSTRAINT PK_LANGUES PRIMARY KEY(NOMLANGUE)
);

-- Table COMPETENCES
CREATE TABLE CATEGORIE_CPT
(
	NOMCATEGORIE VARCHAR2(150),
	CONSTRAINT PK_CAT_CPT PRIMARY KEY(NOMCATEGORIE)
);

-- Table COMPETENCES
CREATE TABLE COMPETENCES
(
	NOMCPT VARCHAR2(150),
	NOMCATEGORIE VARCHAR2(150),
	CONSTRAINT PK_COMPETENCES PRIMARY KEY(NOMCPT),
	CONSTRAINT FK_CPT_CATCPT_NOMCAT FOREIGN KEY(NOMCATEGORIE) REFERENCES CATEGORIE_CPT(NOMCATEGORIE)
);

-- Table CENTREINTERET
CREATE TABLE CENTREINTERET
(
	NOMCTRINT VARCHAR2(150),
	CONSTRAINT PK_CENTREINTERER PRIMARY KEY(NOMCTRINT)
);

-- Table SITES_RESEAUX
CREATE TABLE SITES_RESEAUX
(
	IDSITERES VARCHAR2(150), 
	IDCAN VARCHAR2(150),
	LIEN VARCHAR2(150),
	CONSTRAINT PK_SITES_RESEAUX PRIMARY KEY(IDSITERES),
	CONSTRAINT FK_SITERESEAU_CANDIDAT_IDCAN	FOREIGN KEY(IDCAN) REFERENCES CANDIDATS(IDCAN)
);

-- Table PERMIS
CREATE TABLE PERMIS
(
	NOMPERM VARCHAR2(150),
	CONSTRAINT PK_PERMIS PRIMARY KEY(NOMPERM),
	CONSTRAINT CK_PERMIS_NOMPERM CHECK(NOMPERM IN ('AM','BSR','A','A1','A2','B','B1','B2','BE','BVA','C','C1','CE','C1E','D','D1','D2','DE','DE1'))
);

-- Table DIPLOMES
CREATE TABLE DIPLOMES
(
	IDDIPLOME VARCHAR2(150), 
	NOMDIMPLOME VARCHAR2(150),
	DESCRIPTIFDIPLOME VARCHAR2(150),
	CONSTRAINT PK_DIPLOMES PRIMARY KEY(IDDIPLOME)
);

-- Table CV
CREATE TABLE CV
(
	IDCV VARCHAR2(150), 
	IDCAN VARCHAR2(150),
	NOMCV VARCHAR2(150),
	TITRECV VARCHAR2(150),
	DESCRIPTIFCV VARCHAR2(150),
	POSTERECHERCHER VARCHAR2(150),
	TYPEPOSTE VARCHAR2(150),
	DISPONIBILITE DATE,
	ADMIS VARCHAR2(150),
	DATETRANSMISSION DATE,
	PHOTO VARCHAR2(150),
	CONSTRAINT PK_CV PRIMARY KEY(IDCV),
	CONSTRAINT CK_CV_ADMIS CHECK(ADMIS IN ('ACCEPTE','REFUSE')),
	CONSTRAINT FK_CV_CANDIDAT_IDCAN	FOREIGN KEY(IDCAN) REFERENCES CANDIDATS(IDCAN)
);

-- Table EXPERIENCES
CREATE TABLE EXPERIENCES
(
	IDEXP VARCHAR2(150), 
	IDENT VARCHAR2(150),
	NOMEXP VARCHAR2(150),
	DESCRIPTIFEXP VARCHAR2(150),
	CONSTRAINT PK_EXPERIENCES PRIMARY KEY(IDEXP),
	CONSTRAINT FK_EXP_ENT_IDENT FOREIGN KEY(IDENT) REFERENCES ENTREPRISES(IDENT)
);

-- Table MISSIONS
CREATE TABLE MISSIONS
(
	IDMISSION VARCHAR2(150), 
	NOMMISSION VARCHAR2(150),
	DESCRIPTIFMISSION VARCHAR2(150),
	CONSTRAINT PK_MISSIONS PRIMARY KEY(IDMISSION)
);

-- Table FORMATIONS
CREATE TABLE FORMATIONS
(
	IDFORM VARCHAR2(150),
	IDETASCO VARCHAR2(150),
	NIVEAU VARCHAR2(150), 
	SPECIALITE VARCHAR2(150), 
	CONSTRAINT PK_FORMATIONS PRIMARY KEY(IDFORM),
	CONSTRAINT FK_FORM_ETASCO_IDETASCO FOREIGN KEY(IDETASCO) REFERENCES ETABLISSEMENTSCOLAIRES(IDETASCO)
);


-- Table OBTENTIONDIPLOME
CREATE TABLE OBTENTIONDIPLOME
(
	IDDIPLOME VARCHAR2(150), 
	IDCAN VARCHAR2(150),
	MENTION VARCHAR2(150),
	DATEOBTENTION DATE,
	CONSTRAINT PK_OBTDIPL PRIMARY KEY(IDDIPLOME,IDCAN),
	CONSTRAINT FK_OBTDIPL_DIPLOME_IDDIP FOREIGN KEY(IDDIPLOME) REFERENCES DIPLOMES(IDDIPLOME),
	CONSTRAINT FK_OBTDIPL_CAN_IDCAN FOREIGN KEY(IDCAN) REFERENCES CANDIDATS(IDCAN)
);

-- Table OBTENTIONPERMIS
CREATE TABLE OBTENTIONPERMIS
(
	NOMPERM VARCHAR2(150), 
	IDCAN VARCHAR2(150),
	DATEOBTENTION DATE,
	CONSTRAINT PK_OBTPERM PRIMARY KEY(NOMPERM,IDCAN),
	CONSTRAINT FK_OBTPERM_PERM_NOMPERM FOREIGN KEY(NOMPERM) REFERENCES PERMIS(NOMPERM),
	CONSTRAINT FK_OBTPERM_CAN_IDCAN FOREIGN KEY(IDCAN) REFERENCES CANDIDATS(IDCAN)
);

-- Table RELATION_CENTINT_CAN
CREATE TABLE RELATION_CENTINT_CAN
(
	NOMCTRINT VARCHAR2(150), 
	IDCAN VARCHAR2(150),
	CONSTRAINT PK_RELCICAN PRIMARY KEY(NOMCTRINT,IDCAN),
	CONSTRAINT FK_RELCICAN_CINT_NOMCTRINT FOREIGN KEY(NOMCTRINT) REFERENCES CENTREINTERET(NOMCTRINT),
	CONSTRAINT FK_RELCICAN_CAN_IDCAN FOREIGN KEY(IDCAN) REFERENCES CANDIDATS(IDCAN)
);

-- Table RELATION_COMP_CAN
CREATE TABLE RELATION_COMP_CAN
(
	NOMCPT VARCHAR2(150), 
	IDCAN VARCHAR2(150),
	CONSTRAINT PK_RELCOMPCAN PRIMARY KEY(NOMCPT,IDCAN),
	CONSTRAINT FK_RELCOMPCAN_NOMCPT FOREIGN KEY(NOMCPT) REFERENCES COMPETENCES(NOMCPT),
	CONSTRAINT FK_RELCOMPCAN_CAN_IDCAN FOREIGN KEY(IDCAN) REFERENCES CANDIDATS(IDCAN)
);

-- Table RELATION_LANG_CAN
CREATE TABLE RELATION_LANG_CAN
(
	NOMLANGUE VARCHAR2(150), 
	IDCAN VARCHAR2(150),
	NIVEAU VARCHAR2(150),
	CONSTRAINT PK_RELLANGCAN PRIMARY KEY(NOMLANGUE,IDCAN),
	CONSTRAINT FK_RELLANGCAN_LANG_NOMLANGUE FOREIGN KEY(NOMLANGUE) REFERENCES LANGUES(NOMLANGUE),
	CONSTRAINT FK_RELLANGCAN_CAN_IDCAN FOREIGN KEY(IDCAN) REFERENCES CANDIDATS(IDCAN)
);

-- Table RELATION_PROJET_CAN
CREATE TABLE RELATION_PROJET_CAN
(
	IDPROJ VARCHAR2(150), 
	IDCAN VARCHAR2(150),
	DATEDEBUTPROJ DATE,
	DATEFINPROJ DATE,
	CONSTRAINT PK_RELPROJCAN PRIMARY KEY(IDPROJ,IDCAN),
	CONSTRAINT FK_RELPROJCAN_IDPROJ FOREIGN KEY(IDPROJ) REFERENCES PROJETS(IDPROJ),
	CONSTRAINT FK_RELPROJCAN_CAN_IDCAN FOREIGN KEY(IDCAN) REFERENCES CANDIDATS(IDCAN),
	CONSTRAINT CK_RELPROJCAN_DATE CHECK(DATEDEBUTPROJ <= DATEFINPROJ)
);

-- Table RELATION_EXP_CAN
CREATE TABLE RELATION_EXP_CAN
(
	IDEXP VARCHAR2(150), 
	IDCAN VARCHAR2(150),
	DATEDEBUTEXP DATE,
	DATEFINEXP DATE,
	CONSTRAINT PK_RELEXPCAN PRIMARY KEY(IDEXP,IDCAN),
	CONSTRAINT FK_RELEXPCAN_IDEXP FOREIGN KEY(IDEXP) REFERENCES EXPERIENCES(IDEXP),
	CONSTRAINT FK_RELEXPCAN_CAN_IDCAN FOREIGN KEY(IDCAN) REFERENCES CANDIDATS(IDCAN),
	CONSTRAINT CK_RELEXPCAN_DATE CHECK(DATEDEBUTEXP <= DATEFINEXP)
);

-- Table RELATION_EXP_MISS
CREATE TABLE RELATION_EXP_MISS
(
	IDEXP VARCHAR2(150), 
	IDMISSION VARCHAR2(150),
	CONSTRAINT PK_RELEXPMISS PRIMARY KEY(IDEXP,IDMISSION),
	CONSTRAINT FK_RELEXPMISS_EXP_IDEXP FOREIGN KEY(IDEXP) REFERENCES EXPERIENCES(IDEXP),
	CONSTRAINT FK_RELEXPMISS_MISS_IDMISS FOREIGN KEY(IDMISSION) REFERENCES MISSIONS(IDMISSION)
);

-- Table SUIT_FORMATIONS
CREATE TABLE SUIT_FORMATIONS
(
	IDFORM VARCHAR2(150),
	IDCAN VARCHAR2(150),
	DATEDEBUTFORM DATE,
	DATEFINFORM DATE,
	CONSTRAINT PK_SUIT_FORM PRIMARY KEY(IDFORM,IDCAN),
	CONSTRAINT FK_FORMATIONS_FORM_IDFORM FOREIGN KEY(IDFORM) REFERENCES FORMATIONS(IDFORM),
	CONSTRAINT FK_FORMATIONS_CAN_IDCAN FOREIGN KEY(IDCAN) REFERENCES CANDIDATS(IDCAN)
);




-- Création des méta-tables
-- ====================================================================================================
--										META-TABLES
-- Les méta-tables permettent de stocker les contraintes de tous les attributs de toutes les tables
-- Elles permettent de faciliter l'ajout de contraintes
-- En effet, si on veut ajouter une contrainte à un attribut, il faut simplement ajouter l'expression 
-- régulière de cette contrainte.						
-- ====================================================================================================
CREATE TABLE META_ADRESSES
(
	CONST_IDADR VARCHAR2(2000) DEFAULT NULL, 
	CONST_NUMADR VARCHAR2(2000) DEFAULT NULL,
	CONST_LOCALITEADR VARCHAR2(2000) DEFAULT NULL,
	CONST_NOMRUEADR VARCHAR2(2000) DEFAULT NULL,
	CONST_CPADR VARCHAR2(2000) DEFAULT NULL,
	CONST_VILLEADR VARCHAR2(2000) DEFAULT NULL,
	CONST_PAYSADR VARCHAR2(2000) DEFAULT NULL,
	CONST_CONTINENTADR VARCHAR2(2000) DEFAULT NULL
);

CREATE TABLE META_CANDIDATS
(
	CONST_IDCAN VARCHAR2(2000) DEFAULT NULL, 
	CONST_IDADR VARCHAR2(2000) DEFAULT NULL,
	CONST_NOMCAN VARCHAR2(2000) DEFAULT NULL,
	CONST_PRENOMCAN VARCHAR2(2000) DEFAULT NULL,
	CONST_SEXE VARCHAR2(2000) DEFAULT NULL,
	CONST_AGE VARCHAR2(2000) DEFAULT NULL,
	CONST_DATENAISSANCE VARCHAR2(2000) DEFAULT NULL,
	CONST_MAILCAN VARCHAR2(2000) DEFAULT NULL,
	CONST_NATIONALITE VARCHAR2(2000) DEFAULT NULL,
	CONST_TELCAN VARCHAR2(2000) DEFAULT NULL
);


CREATE TABLE META_ETABLISSEMENTSCOLAIRES
(
	CONST_IDETASCO VARCHAR2(2000) DEFAULT NULL, 
	CONST_IDADR VARCHAR2(2000) DEFAULT NULL,
	CONST_NOMETASCO VARCHAR2(2000) DEFAULT NULL,
	CONST_MAILETASCO VARCHAR2(2000) DEFAULT NULL,
	CONST_TELETASCO VARCHAR2(2000) DEFAULT NULL
);

CREATE TABLE META_ENTREPRISES
(
	CONST_IDENT VARCHAR2(2000) DEFAULT NULL, 
	CONST_IDADR VARCHAR2(2000) DEFAULT NULL,
	CONST_NOMENT VARCHAR2(2000) DEFAULT NULL,
	CONST_MAILENT VARCHAR2(2000) DEFAULT NULL,
	CONST_TELENT VARCHAR2(2000) DEFAULT NULL
);

CREATE TABLE META_PROJETS
(
	CONST_IDPROJ VARCHAR2(2000) DEFAULT NULL, 
	CONST_IDETASCO VARCHAR2(2000) DEFAULT NULL,
	CONST_NOMPROJ VARCHAR2(2000) DEFAULT NULL,
	CONST_DESCRIPTIFPROJ VARCHAR2(2000) DEFAULT NULL
);

CREATE TABLE META_LANGUES
(
	CONST_NOMLANGUE VARCHAR2(2000)  DEFAULT NULL
);

CREATE TABLE META_COMPETENCES
(
	CONST_NOMCPT VARCHAR2(2000) DEFAULT NULL,
	CONST_NOMCATEGORIE VARCHAR2(2000) DEFAULT NULL
);

CREATE TABLE META_CENTREINTERET
(
	CONST_NOMCTRINT VARCHAR2(2000) DEFAULT NULL
);

CREATE TABLE META_SITES_RESEAUX
(
	CONST_IDSITERES VARCHAR2(2000) DEFAULT NULL,
	CONST_IDCAN VARCHAR2(2000) DEFAULT NULL,
	CONST_LIEN VARCHAR2(2000) DEFAULT NULL
);


CREATE TABLE META_PERMIS
(
	CONST_NOMPERM VARCHAR2(2000) DEFAULT NULL
);

CREATE TABLE META_DIPLOMES
(
	CONST_IDDIPLOME VARCHAR2(2000) DEFAULT NULL,
	CONST_NOMDIMPLOME VARCHAR2(2000) DEFAULT NULL,
	CONST_DESCRIPTIFDIPLOME VARCHAR2(2000) DEFAULT NULL
);

CREATE TABLE META_CV
(
	CONST_IDCV VARCHAR2(2000) DEFAULT NULL,
	CONST_IDCAN VARCHAR2(2000) DEFAULT NULL,
	CONST_NOMCV VARCHAR2(2000) DEFAULT NULL,
	CONST_TITRECV VARCHAR2(2000) DEFAULT NULL,
	CONST_DESCRIPTIFCV VARCHAR2(2000) DEFAULT NULL,
	CONST_POSTERECHERCHER VARCHAR2(2000) DEFAULT NULL,
	CONST_TYPEPOSTE VARCHAR2(2000) DEFAULT NULL,
	CONST_DISPONIBILITE VARCHAR2(2000) DEFAULT NULL,
	CONST_ADMIS VARCHAR2(2000) DEFAULT NULL,
	CONST_DATETRANSMISSION VARCHAR2(2000) DEFAULT NULL,
	CONST_PHOTO VARCHAR2(2000) DEFAULT NULL
);

CREATE TABLE META_EXPERIENCES
(
	CONST_IDEXP VARCHAR2(2000) DEFAULT NULL, 
	CONST_IDENT VARCHAR2(2000) DEFAULT NULL,
	CONST_NOMEXP VARCHAR2(2000) DEFAULT NULL,
	CONST_DESCRIPTIFEXP VARCHAR2(2000) DEFAULT NULL
);

CREATE TABLE META_MISSIONS
(
	CONST_IDMISSION VARCHAR2(2000) DEFAULT NULL, 
	CONST_NOMMISSION VARCHAR2(2000) DEFAULT NULL,
	CONST_DESCRIPTIFMISSION VARCHAR2(2000) DEFAULT NULL
);

CREATE TABLE META_FORMATIONS
(
	CONST_IDFORM VARCHAR2(2000) DEFAULT NULL, 
	CONST_IDETASCO VARCHAR2(2000) DEFAULT NULL,
	CONST_NIVEAU VARCHAR2(2000) DEFAULT NULL,
	CONST_SPECIALITE VARCHAR2(2000) DEFAULT NULL
);

CREATE TABLE META_CATEGORIE_CPT
(
	CONST_NOMCATEGORIE VARCHAR2(2000) DEFAULT NULL
);


-- ===========================================================================================================================================
-- 														PROCEDURES D'INSERTION
--
-- Ces procédures s'appuient sur les méta-tables des tables afin de vérifier les contraintes de chaques colonnes
-- Chaque Insertion passe par une de ces procédures.
-- Si un des attributs à insérer ne repecte pas une des contraintes qui lui est définies, la ligne entière ne s'insère pas
-- Cette vérification se fait avant l'insertion préalable. Ainsi, toutes les contraintes de tables (clé primaire, étangères, sur les attributs...)
-- seront vérifiés dans un second temps
-- ===========================================================================================================================================
SET SERVEROUTPUT ON;


CREATE OR REPLACE PROCEDURE INSERT_ADRESSES(
	 IDADR VARCHAR2, 	
	 NUMADR VARCHAR2,
	 LOCALITEADR VARCHAR2,
	 NOMRUEADR VARCHAR2,
	 CPADR VARCHAR2,
	 VILLEADR VARCHAR2,
	 PAYSADR VARCHAR2,
	 CONTINENTADR VARCHAR2) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaAdr IS SELECT * FROM META_ADRESSES;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 BEGIN
		 FOR ligne IN cur_MetaAdr LOOP 
			-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
			 IF  (ligne.CONST_IDADR 		IS NOT NULL AND NOT REGEXP_LIKE(NVL(IDADR,'NULL')		, ligne.CONST_IDADR)) 			OR
				 (ligne.CONST_NUMADR 		IS NOT NULL AND NOT REGEXP_LIKE(NVL(NUMADR,'NULL')		, ligne.CONST_NUMADR)) 			OR
				 (ligne.CONST_LOCALITEADR 	IS NOT NULL AND NOT REGEXP_LIKE(NVL(LOCALITEADR,'NULL')	, ligne.CONST_LOCALITEADR)) 	OR
				 (ligne.CONST_NOMRUEADR 	IS NOT NULL AND NOT REGEXP_LIKE(NVL(NOMRUEADR,'NULL')	, ligne.CONST_NOMRUEADR)) 		OR
				 (ligne.CONST_CPADR 		IS NOT NULL AND NOT REGEXP_LIKE(NVL(CPADR,'NULL'), ligne.CONST_CPADR ))     OR
				 (ligne.CONST_VILLEADR 		IS NOT NULL AND NOT REGEXP_LIKE(VILLEADR	, ligne.CONST_VILLEADR)) 		OR
				 (ligne.CONST_PAYSADR 		IS NOT NULL AND NOT REGEXP_LIKE(PAYSADR		, ligne.CONST_PAYSADR)) 		OR
				 (ligne.CONST_CONTINENTADR 	IS NOT NULL AND NOT REGEXP_LIKE(CONTINENTADR, ligne.CONST_CONTINENTADR))
			 THEN
				 anomalie := 'TRUE';
			 END IF;
		 END LOOP;
		--Si ANOMALIE on n'insère pas, sinon on insère
		 IF anomalie = 'TRUE' THEN 
			 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
		 ELSE
			 INSERT INTO ADRESSES VALUES(IDADR, NUMADR, LOCALITEADR, NOMRUEADR, CPADR, VILLEADR, PAYSADR, CONTINENTADR);
		 	 DBMS_OUTPUT.PUT_LINE('Ligne inseree avec succes.');
		 END IF;
	 END;
	/


CREATE OR REPLACE PROCEDURE INSERT_CANDIDATS(
	 IDCAN VARCHAR2, 
	 IDADR VARCHAR2,
	 NOMCAN VARCHAR2,
	 PRENOMCAN VARCHAR2,
	 SEXE CHAR,
	 AGE NUMBER,
	 DATENAISSANCE DATE,
	 MAILCAN VARCHAR2,
	 NATIONALITE VARCHAR2,
	 TELCAN VARCHAR2
	 ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaCan IS SELECT * FROM META_CANDIDATS;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 
	 BEGIN
		 FOR ligne IN cur_MetaCan LOOP 

			-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
			 IF  (ligne.CONST_IDCAN 		IS NOT NULL AND NOT REGEXP_LIKE(IDCAN			, ligne.CONST_IDCAN)) 					OR
				 (ligne.CONST_IDADR 		IS NOT NULL AND NOT REGEXP_LIKE(NVL(IDADR,'NULL'), ligne.CONST_IDADR)) 					OR
				 (ligne.CONST_NOMCAN	 	IS NOT NULL AND NOT REGEXP_LIKE(NOMCAN			, ligne.CONST_NOMCAN))		 			OR
				 (ligne.CONST_PRENOMCAN 	IS NOT NULL AND NOT REGEXP_LIKE(PRENOMCAN		, ligne.CONST_PRENOMCAN)) 				OR
				 (ligne.CONST_SEXE	 		IS NOT NULL AND NOT REGEXP_LIKE(NVL(SEXE,'NULL'), ligne.CONST_SEXE)) 					OR
				 (ligne.CONST_AGE	 		IS NOT NULL AND NOT REGEXP_LIKE(NVL(TO_CHAR(AGE),'NULL')	, ligne.CONST_AGE)) 		OR
				 (ligne.CONST_DATENAISSANCE IS NOT NULL AND NOT REGEXP_LIKE(NVL(DATENAISSANCE,'NULL'), ligne.CONST_DATENAISSANCE)) 	OR
				 (ligne.CONST_MAILCAN 		IS NOT NULL AND NOT REGEXP_LIKE(NVL(MAILCAN,'NULL'), ligne.CONST_MAILCAN)) 				OR
				 (ligne.CONST_NATIONALITE 	IS NOT NULL AND NOT REGEXP_LIKE(NVL(NATIONALITE,'NULL'), ligne.CONST_NATIONALITE))		OR
				 (ligne.CONST_TELCAN 		IS NOT NULL AND NOT REGEXP_LIKE(NVL(TELCAN,'NULL'), ligne.CONST_TELCAN))
			 THEN
			 	 DBMS_OUTPUT.PUT_LINE(ligne.CONST_PRENOMCAN);

				 anomalie := 'TRUE';
			 END IF;
		 END LOOP;
		--Si ANOMALIE on n'insère pas, sinon on insère
		 IF anomalie = 'TRUE' THEN 
			 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
		 ELSE
			 INSERT INTO CANDIDATS VALUES(IDCAN, IDADR, NOMCAN, PRENOMCAN, SEXE, AGE, DATENAISSANCE, MAILCAN, NATIONALITE, TELCAN);
		 	 DBMS_OUTPUT.PUT_LINE('Ligne inseree avec succes.');
		 END IF;
	 END;
	/
	

CREATE OR REPLACE PROCEDURE INSERT_ETABLISSEMENTSCOLAIRES(
	 IDETASCO VARCHAR2, 
	 IDADR VARCHAR2,
	 NOMETASCO VARCHAR2,
	 MAILETASCO VARCHAR2,
	 TELETASCO CHAR
	 ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaEtbSco IS SELECT * FROM META_ETABLISSEMENTSCOLAIRES;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 
	 BEGIN
		 FOR ligne IN cur_MetaEtbSco LOOP 

			-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
			 IF  (ligne.CONST_IDETASCO 		IS NOT NULL AND NOT REGEXP_LIKE(IDETASCO		, ligne.CONST_IDETASCO)) 		 OR
				 (ligne.CONST_IDADR 		IS NOT NULL AND NOT REGEXP_LIKE(NVL(IDADR,'NULL'), ligne.CONST_IDADR)) 			 OR
				 (ligne.CONST_NOMETASCO	 	IS NOT NULL AND NOT REGEXP_LIKE(NVL(NOMETASCO,'NULL'), ligne.CONST_NOMETASCO))   OR
				 (ligne.CONST_MAILETASCO 	IS NOT NULL AND NOT REGEXP_LIKE(NVL(MAILETASCO,'NULL'), ligne.CONST_MAILETASCO)) OR
				 (ligne.CONST_TELETASCO	    IS NOT NULL AND NOT REGEXP_LIKE(NVL(TELETASCO,'NULL'), ligne.CONST_TELETASCO))
			 THEN
				 anomalie := 'TRUE';
			 END IF;
		 END LOOP;
		--Si ANOMALIE on n'insère pas, sinon on insère
		 IF anomalie = 'TRUE' THEN 
			 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
		 ELSE
			 INSERT INTO ETABLISSEMENTSCOLAIRES VALUES(IDETASCO, IDADR, NOMETASCO, MAILETASCO, TELETASCO);
		 	 DBMS_OUTPUT.PUT_LINE('Ligne inseree avec succes.');
		 END IF;
	 END;
	/

CREATE OR REPLACE PROCEDURE INSERT_ENTREPRISES(
	 IDENT VARCHAR2, 
	 IDADR VARCHAR2,
	 NOMENT VARCHAR2,
	 MAILENT VARCHAR2,
	 TELENT CHAR
	 ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaEnt IS SELECT * FROM META_ENTREPRISES;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 
	 BEGIN
		 FOR ligne IN cur_MetaEnt LOOP 

			-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
			 IF  (ligne.CONST_IDENT 	IS NOT NULL AND NOT REGEXP_LIKE(IDENT	, ligne.CONST_IDENT)) 	OR
				 (ligne.CONST_IDADR 	IS NOT NULL AND NOT REGEXP_LIKE(NVL(IDADR,'NULL'), ligne.CONST_IDADR)) 	OR
				 (ligne.CONST_NOMENT 	IS NOT NULL AND NOT REGEXP_LIKE(NVL(NOMENT,'NULL')	, ligne.CONST_NOMENT))	OR
				 (ligne.CONST_MAILENT   IS NOT NULL AND NOT REGEXP_LIKE(NVL(MAILENT,'NULL')	, ligne.CONST_MAILENT)) OR
				 (ligne.CONST_TELENT    IS NOT NULL AND NOT REGEXP_LIKE(NVL(TELENT,'NULL')	, ligne.CONST_TELENT))
			 THEN
				 anomalie := 'TRUE';
			 END IF;
		 END LOOP;
		--Si ANOMALIE on n'insère pas, sinon on insère
		 IF anomalie = 'TRUE' THEN 
			 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
		 ELSE
			 INSERT INTO ENTREPRISES VALUES(IDENT, IDADR, NOMENT, MAILENT, TELENT);
		 	 DBMS_OUTPUT.PUT_LINE('Ligne inseree avec succes.');
		 END IF;
	 END;
	/

CREATE OR REPLACE PROCEDURE INSERT_PROJETS(
	 IDPROJ VARCHAR2, 
	 IDETASCO VARCHAR2,
	 NOMPROJ VARCHAR2,
	 DESCRIPTIFPROJ VARCHAR2
     ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaProj IS SELECT * FROM META_PROJETS;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 
	 BEGIN
		 FOR ligne IN cur_MetaProj LOOP 

			-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
			 IF  (ligne.CONST_IDPROJ 		   IS NOT NULL AND NOT REGEXP_LIKE(IDPROJ			, ligne.CONST_IDPROJ)) 		OR
				 (ligne.CONST_IDETASCO 		   IS NOT NULL AND NOT REGEXP_LIKE(IDETASCO			, ligne.CONST_IDETASCO)) 	OR
				 (ligne.CONST_NOMPROJ 		   IS NOT NULL AND NOT REGEXP_LIKE(NOMPROJ			, ligne.CONST_NOMPROJ))		OR
				 (ligne.CONST_DESCRIPTIFPROJ   IS NOT NULL AND NOT REGEXP_LIKE(NVL(DESCRIPTIFPROJ,'NULL'), ligne.CONST_DESCRIPTIFPROJ))
			 THEN
				 anomalie := 'TRUE';
			 END IF;
		 END LOOP;
		--Si ANOMALIE on n'insère pas, sinon on insère
		 IF anomalie = 'TRUE' THEN 
			 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
		 ELSE
			 INSERT INTO PROJETS VALUES(IDPROJ, IDETASCO, NOMPROJ, DESCRIPTIFPROJ);
		 	 DBMS_OUTPUT.PUT_LINE('Ligne inseree avec succes.');
		 END IF;
	 END;
	/

CREATE OR REPLACE PROCEDURE INSERT_LANGUES(
	 NOMLANGUE VARCHAR2
     ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaLang IS SELECT * FROM META_LANGUES;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 
	 BEGIN
		 FOR ligne IN cur_MetaLang LOOP 

			-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
			 IF  (ligne.CONST_NOMLANGUE IS NOT NULL AND NOT REGEXP_LIKE(NOMLANGUE, ligne.CONST_NOMLANGUE))
			 THEN
				 anomalie := 'TRUE';
			 END IF;
		 END LOOP;
		--Si ANOMALIE on n'insère pas, sinon on insère
		 IF anomalie = 'TRUE' THEN 
			 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
		 ELSE
			 INSERT INTO LANGUES VALUES(NOMLANGUE);
		 	 DBMS_OUTPUT.PUT_LINE('Ligne inseree avec succes.');
		 END IF;
	 END;
	/
	
CREATE OR REPLACE PROCEDURE INSERT_CATEGORIE_CPT(
	 NOMCATEGORIE_ VARCHAR2
     ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaCpt IS SELECT * FROM META_CATEGORIE_CPT;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 test_existence NUMBER(2);
	 BEGIN
		 IF NOMCATEGORIE_ IS NOT NULL THEN
			 FOR ligne IN cur_MetaCpt LOOP 
				-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
				 IF (ligne.CONST_NOMCATEGORIE IS NOT NULL AND NOT REGEXP_LIKE(NOMCATEGORIE_,'NULL', ligne.CONST_NOMCATEGORIE))
				 THEN
					 anomalie := 'TRUE';
				 END IF;
			 END LOOP;
			--Si ANOMALIE on n'insère pas, sinon on insère
			 IF anomalie = 'TRUE' THEN 
				 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
			 ELSE
				 SELECT COUNT(*) INTO test_existence FROM CATEGORIE_CPT WHERE NOMCATEGORIE_ IS NOT NULL AND NOMCATEGORIE = NOMCATEGORIE_;
				 IF test_existence = 0 THEN 
					 INSERT INTO CATEGORIE_CPT VALUES(NOMCATEGORIE_);
					 DBMS_OUTPUT.PUT_LINE('Ligne inseree avec succes.');
				 END IF;
			 END IF;
		 END IF;
	 END;
	/

CREATE OR REPLACE PROCEDURE INSERT_COMPETENCES(
	 NOMCPT_ VARCHAR2,
	 NOMCATEGORIE_ VARCHAR2
     ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaCpt IS SELECT * FROM META_COMPETENCES;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 test_existence NUMBER(2);
	 BEGIN
		 FOR ligne IN cur_MetaCpt LOOP 
			-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
			 IF (ligne.CONST_NOMCPT 		IS NOT NULL AND NOT REGEXP_LIKE(NOMCPT_		, ligne.CONST_NOMCPT)) OR
				(ligne.CONST_NOMCATEGORIE 	IS NOT NULL AND NOT REGEXP_LIKE(NVL(NOMCATEGORIE_,'NULL'), ligne.CONST_NOMCATEGORIE))
			 THEN
				 anomalie := 'TRUE';
			 END IF;
		 END LOOP;
		--Si ANOMALIE on n'insère pas, sinon on insère
		 IF anomalie = 'TRUE' THEN 
			 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
		 ELSE
			 SELECT COUNT(*) INTO test_existence FROM CATEGORIE_CPT WHERE NOMCATEGORIE_ IS NOT NULL AND NOMCATEGORIE = NOMCATEGORIE_;
			 IF test_existence = 0 AND NOMCATEGORIE_ IS NOT NULL THEN 
				 INSERT_CATEGORIE_CPT(NOMCATEGORIE_);
			 END IF;
			 SELECT COUNT(*) INTO test_existence FROM COMPETENCES WHERE NOMCPT_ IS NOT NULL AND NOMCPT = NOMCPT_;
			 IF test_existence = 0 THEN 
				 INSERT INTO COMPETENCES VALUES(NOMCPT_, NOMCATEGORIE_);
				 DBMS_OUTPUT.PUT_LINE('Ligne inseree avec succes.');
			 END IF;
		 END IF;
	 END;
	/
	

CREATE OR REPLACE PROCEDURE INSERT_CENTREINTERET(
	 NOMCTRINT VARCHAR2
     ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaCInt IS SELECT * FROM META_CENTREINTERET;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 
	 BEGIN
		 FOR ligne IN cur_MetaCInt LOOP 

			-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
			 IF (ligne.CONST_NOMCTRINT 		IS NOT NULL AND NOT REGEXP_LIKE(NOMCTRINT		, ligne.CONST_NOMCTRINT))
			 THEN
				 anomalie := 'TRUE';
			 END IF;
		 END LOOP;
		--Si ANOMALIE on n'insère pas, sinon on insère
		 IF anomalie = 'TRUE' THEN 
			 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
		 ELSE
			 INSERT INTO CENTREINTERET VALUES(NOMCTRINT);
		 	 DBMS_OUTPUT.PUT_LINE('Ligne inseree avec succes.');
		 END IF;
	 END;
	/


CREATE OR REPLACE PROCEDURE INSERT_SITES_RESEAUX(
	 IDSITERES VARCHAR2, 
	 IDCAN VARCHAR2,
	 LIEN VARCHAR2
     ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaSitRes IS SELECT * FROM META_SITES_RESEAUX;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 
	 BEGIN
		 FOR ligne IN cur_MetaSitRes LOOP 

			-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
			 IF  (ligne.CONST_IDSITERES IS NOT NULL AND NOT REGEXP_LIKE(IDSITERES	, ligne.CONST_IDSITERES)) OR
				 (ligne.CONST_IDCAN 	IS NOT NULL AND NOT REGEXP_LIKE(IDCAN		, ligne.CONST_IDCAN)) 	  OR
				 (ligne.CONST_LIEN  	IS NOT NULL AND NOT REGEXP_LIKE(LIEN		, ligne.CONST_LIEN))
			 THEN
				 anomalie := 'TRUE';
			 END IF;
		 END LOOP;
		--Si ANOMALIE on n'insère pas, sinon on insère
		 IF anomalie = 'TRUE' THEN 
			 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
		 ELSE
			 INSERT INTO SITES_RESEAUX VALUES(IDSITERES, IDCAN, LIEN);
		 	 DBMS_OUTPUT.PUT_LINE('Ligne inseree avec succes.');
		 END IF;
	 END;
	/


CREATE OR REPLACE PROCEDURE INSERT_PERMIS(
	 NOMPERM VARCHAR2
     ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaPerm IS SELECT * FROM META_PERMIS;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 
	 BEGIN
		 FOR ligne IN cur_MetaPerm LOOP 

			-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
			 IF (ligne.CONST_NOMPERM 	IS NOT NULL AND NOT REGEXP_LIKE(NOMPERM	, ligne.CONST_NOMPERM))
			 THEN
				 anomalie := 'TRUE';
			 END IF;
		 END LOOP;
		--Si ANOMALIE on n'insère pas, sinon on insère
		 IF anomalie = 'TRUE' THEN 
			 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
		 ELSE
			 INSERT INTO PERMIS VALUES(NOMPERM);
		 	 DBMS_OUTPUT.PUT_LINE('Ligne inseree avec succes.');
		 END IF;
	 END;
	/


CREATE OR REPLACE PROCEDURE INSERT_DIPLOMES(
	 IDDIPLOME VARCHAR2, 
	 NOMDIMPLOME VARCHAR2,
	 DESCRIPTIFDIPLOME VARCHAR2 
     ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaDipl IS SELECT * FROM META_DIPLOMES;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 
	 BEGIN
		 FOR ligne IN cur_MetaDipl LOOP 

			-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
			 IF  (ligne.CONST_IDDIPLOME	        IS NOT NULL AND NOT REGEXP_LIKE(IDDIPLOME           , ligne.CONST_IDDIPLOME))   OR
				 (ligne.CONST_NOMDIMPLOME 		IS NOT NULL AND NOT REGEXP_LIKE(NOMDIMPLOME			, ligne.CONST_NOMDIMPLOME)) OR
				 (ligne.CONST_DESCRIPTIFDIPLOME IS NOT NULL AND NOT REGEXP_LIKE(DESCRIPTIFDIPLOME, ligne.CONST_DESCRIPTIFDIPLOME))
			 THEN
				 anomalie := 'TRUE';
			 END IF;
		 END LOOP;
		--Si ANOMALIE on n'insère pas, sinon on insère
		 IF anomalie = 'TRUE' THEN 
			 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
		 ELSE
			 INSERT INTO DIPLOMES VALUES(IDDIPLOME, NOMDIMPLOME, DESCRIPTIFDIPLOME);
		 	 DBMS_OUTPUT.PUT_LINE('Ligne inseree avec succes.');
		 END IF;
	 END;
	/
	
CREATE OR REPLACE PROCEDURE INSERT_CV(
	 IDCV VARCHAR2, 
	 IDCAN VARCHAR2,
	 NOMCV VARCHAR2,
	 TITRECV VARCHAR2,
	 DESCRIPTIFCV VARCHAR2,
	 POSTERECHERCHER VARCHAR2,
	 TYPEPOSTE VARCHAR2,
	 DISPONIBILITE DATE,
	 ADMIS VARCHAR2,
	 DATETRANSMISSION DATE,
	 PHOTO VARCHAR2
     ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaCv IS SELECT * FROM META_CV;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 
	 BEGIN
		 FOR ligne IN cur_MetaCv LOOP 

			-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
			 IF  (ligne.CONST_IDCV	            IS NOT NULL AND NOT REGEXP_LIKE(IDCV           	, ligne.CONST_IDCV))   			OR
				 (ligne.CONST_IDCAN 		    IS NOT NULL AND NOT REGEXP_LIKE(IDCAN			, ligne.CONST_IDCAN)) 			OR
				 (ligne.CONST_NOMCV 		    IS NOT NULL AND NOT REGEXP_LIKE(NOMCV			, ligne.CONST_NOMCV))  			OR
				 (ligne.CONST_TITRECV 		    IS NOT NULL AND NOT REGEXP_LIKE(TITRECV			, ligne.CONST_TITRECV)) 		OR
				 (ligne.CONST_DESCRIPTIFCV 	    IS NOT NULL AND NOT REGEXP_LIKE(DESCRIPTIFCV	, ligne.CONST_DESCRIPTIFCV))  	OR
				 (ligne.CONST_POSTERECHERCHER   IS NOT NULL AND NOT REGEXP_LIKE(POSTERECHERCHER	, ligne.CONST_POSTERECHERCHER))	OR
				 (ligne.CONST_TYPEPOSTE 	    IS NOT NULL AND NOT REGEXP_LIKE(TYPEPOSTE		, ligne.CONST_TYPEPOSTE))  		OR
				 (ligne.CONST_DISPONIBILITE     IS NOT NULL AND NOT REGEXP_LIKE(DISPONIBILITE	, ligne.CONST_DISPONIBILITE))  	OR
				 (ligne.CONST_ADMIS 	        IS NOT NULL AND NOT REGEXP_LIKE(ADMIS			, ligne.CONST_ADMIS))  		    OR
				 (ligne.CONST_DATETRANSMISSION  IS NOT NULL AND NOT REGEXP_LIKE(DATETRANSMISSION, ligne.CONST_DATETRANSMISSION))OR
				 (ligne.CONST_PHOTO			    IS NOT NULL AND NOT REGEXP_LIKE(PHOTO			, ligne.CONST_PHOTO)) 
			 THEN
				 anomalie := 'TRUE';
			 END IF;
		 END LOOP;
		--Si ANOMALIE on n'insère pas, sinon on insère
		 IF anomalie = 'TRUE' THEN 
			 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
		 ELSE
			 INSERT INTO CV VALUES(IDCV, IDCAN, NOMCV, TITRECV, DESCRIPTIFCV, POSTERECHERCHER, TYPEPOSTE, DISPONIBILITE, ADMIS, DATETRANSMISSION,PHOTO);
		 	 DBMS_OUTPUT.PUT_LINE('Ligne inseree avec succes.');
		 END IF;
	 END;
	/

CREATE OR REPLACE PROCEDURE INSERT_EXPERIENCES(
	 IDEXP VARCHAR2, 
	 IDENT VARCHAR2,
	 NOMEXP VARCHAR2,
	 DESCRIPTIFEXP VARCHAR2
     ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaExp IS SELECT * FROM META_EXPERIENCES;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 
	 BEGIN
		 FOR ligne IN cur_MetaExp LOOP 

			-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
			 IF  (ligne.CONST_IDEXP	        IS NOT NULL AND NOT REGEXP_LIKE(IDEXP      		, ligne.CONST_IDEXP))   OR
				 (ligne.CONST_IDENT 		IS NOT NULL AND NOT REGEXP_LIKE(IDENT			, ligne.CONST_IDENT)) 	OR
				 (ligne.CONST_NOMEXP 		IS NOT NULL AND NOT REGEXP_LIKE(NOMEXP			, ligne.CONST_NOMEXP))  OR
				 (ligne.CONST_DESCRIPTIFEXP IS NOT NULL AND NOT REGEXP_LIKE(DESCRIPTIFEXP	, ligne.CONST_DESCRIPTIFEXP))
			 THEN
				 anomalie := 'TRUE';
			 END IF;
		 END LOOP;
		--Si ANOMALIE on n'insère pas, sinon on insère
		 IF anomalie = 'TRUE' THEN 
			 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
		 ELSE
			 INSERT INTO EXPERIENCES VALUES(IDEXP, IDENT, NOMEXP, DESCRIPTIFEXP);
		 	 DBMS_OUTPUT.PUT_LINE('Ligne inseree avec succes.');
		 END IF;
	 END;
	/

CREATE OR REPLACE PROCEDURE INSERT_MISSIONS(
	 IDMISSION VARCHAR2, 
	 NOMMISSION VARCHAR2,
	 DESCRIPTIFMISSION VARCHAR2
     ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaMis IS SELECT * FROM META_MISSIONS;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 
	 BEGIN
		 FOR ligne IN cur_MetaMis LOOP 

			-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
			 IF  (ligne.CONST_IDMISSION	        IS NOT NULL AND NOT REGEXP_LIKE(IDMISSION      		, ligne.CONST_IDMISSION))   OR
				 (ligne.CONST_NOMMISSION 		IS NOT NULL AND NOT REGEXP_LIKE(NOMMISSION			, ligne.CONST_NOMMISSION)) 	OR
				 (ligne.CONST_DESCRIPTIFMISSION IS NOT NULL AND NOT REGEXP_LIKE(DESCRIPTIFMISSION	, ligne.CONST_DESCRIPTIFMISSION))  
			 THEN
				 anomalie := 'TRUE';
			 END IF;
		 END LOOP;
		--Si ANOMALIE on n'insère pas, sinon on insère
		 IF anomalie = 'TRUE' THEN 
			 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
		 ELSE
			 INSERT INTO MISSIONS VALUES(IDMISSION, NOMMISSION, DESCRIPTIFMISSION);
		 	 DBMS_OUTPUT.PUT_LINE('Ligne inseree avec succes.');
		 END IF;
	 END;
	/

CREATE OR REPLACE PROCEDURE INSERT_FORMATIONS(
	 IDFORM_ VARCHAR2, 
	 IDETASCO_ VARCHAR2,
	 NIVEAU_ VARCHAR2,
	 SPECIALITE_ VARCHAR2 
     ) AUTHID CURRENT_USER AS 

	-- Curseur sur la méta-table (celle des contraintes)
	 CURSOR cur_MetaForm IS SELECT * FROM META_FORMATIONS;	 
	 anomalie VARCHAR2(150) := 'FALSE';
	 
	 BEGIN
		 FOR ligne IN cur_MetaForm LOOP 

			-- Si on les données ne respecte pas (TOUTES) les contraintes définies dans la méta table
			 IF  (ligne.CONST_IDFORM	 IS NOT NULL AND NOT REGEXP_LIKE(IDFORM_  	, ligne.CONST_IDFORM))  OR
				 (ligne.CONST_IDETASCO 	 IS NOT NULL AND NOT REGEXP_LIKE(IDETASCO_	, ligne.CONST_IDETASCO))  OR
				 (ligne.CONST_NIVEAU     IS NOT NULL AND NOT REGEXP_LIKE(NIVEAU_	, ligne.CONST_NIVEAU))    OR
				 (ligne.CONST_SPECIALITE IS NOT NULL AND NOT REGEXP_LIKE(SPECIALITE_, ligne.CONST_SPECIALITE))
			 THEN
				 anomalie := 'TRUE';
			 END IF;
		 END LOOP;
		--Si ANOMALIE on n'insère pas, sinon on insère
		 IF anomalie = 'TRUE' THEN 
			 DBMS_OUTPUT.PUT_LINE(' /!\ ERROR : La ligne ne respecte pas les contraintes !! /!\ ');
		 ELSE
			 INSERT INTO FORMATIONS VALUES(IDFORM_, IDETASCO_, NIVEAU_, SPECIALITE_);
		 	 DBMS_OUTPUT.PUT_LINE('Ligne inseree avec succes.');
		 END IF;
	 END;
	/

-- ===================================================================================================================================================================
-- Les procédures ci-dessous sont légèrement différentes des précédentes.
-- En effet, elles ne se base pas sur des méta-tables, car les lignes qu'elles insèrent sont constituées de clés primaires (voire un attribut d'association en plus)
-- Néanmoins, avant d'insérer la ligne, elle va d'abord vérifié que l'identifiant unique existe dans l'autre table
-- Si ça n'est pas le cas elle va le créer
-- Ces insertions automatiques permettent de ne jamais réellement insérer (à la main) des données dans les tables telles que PERMIS, LANGUES,...
-- La procédure va le faire automatiquement en fonction des insertions dans OBTENTIONPERMIS, RELATION_LANG_CAN,...
-- ===================================================================================================================================================================
CREATE OR REPLACE PROCEDURE INSERT_OBTENTIONPERMIS(
	-- On passe le nom du permis, la procédure se chargera de recuperer l'id
	 NOMPERM_ VARCHAR2, 
	 IDCAN_ VARCHAR2,
	 DATEOBTENTION_ VARCHAR2
     ) AUTHID CURRENT_USER AS 

	 test_existence NUMBER(2);
	 BEGIN
		 IF NOMPERM_ IS NOT NULL AND IDCAN_ IS NOT NULL THEN
			-- On vérifie si le permis existe
			 SELECT COUNT(*) INTO test_existence FROM PERMIS WHERE NOMPERM = NOMPERM_;
			 IF test_existence = 0 THEN 
				-- On crée le nouveau permis qu'il n'était pas dans la base
				 INSERT_PERMIS(NOMPERM_);
			 END IF;
			 
			-- Permet d'éviter l'insertion de doublons
			 SELECT COUNT(*) INTO test_existence FROM OBTENTIONPERMIS WHERE NOMPERM = NOMPERM_ AND IDCAN = IDCAN_;
			 IF test_existence = 0 THEN 
				-- On insère la relation qu'il existe entre le candidat et le permis
				 INSERT INTO OBTENTIONPERMIS VALUES(NOMPERM_, IDCAN_, DATEOBTENTION_);
			 END IF;
		 END IF;
	 END;
	/
	

CREATE OR REPLACE PROCEDURE INSERT_OBTENTIONDIPLOME(
	 NOMDIMPLOME_ VARCHAR2, 
	 IDCAN_ VARCHAR2,
	 MENTION_ VARCHAR2,
	 DATEOBTENTION_ VARCHAR2
     ) AUTHID CURRENT_USER AS 

	 id_diplome VARCHAR2(150);
	 test_existence NUMBER(2);
	 BEGIN
		 IF NOMDIMPLOME_ IS NOT NULL AND IDCAN_ IS NOT NULL THEN
			 SELECT COUNT(*) INTO test_existence FROM DIPLOMES WHERE NOMDIMPLOME = NOMDIMPLOME_;
			 IF test_existence = 0 THEN 
				 SELECT seq_dipl.nextval INTO id_diplome FROM DUAL;
				 INSERT_DIPLOMES(id_diplome, NOMDIMPLOME_,NULL);
			 ELSE 
				 SELECT IDDIPLOME INTO id_diplome FROM DIPLOMES WHERE NOMDIMPLOME = NOMDIMPLOME_;
			 END IF;
			 
			-- Permet d'éviter l'insertion de doublons
			 SELECT COUNT(*) INTO test_existence FROM OBTENTIONDIPLOME WHERE IDDIPLOME = id_diplome AND IDCAN = IDCAN_;
			 IF test_existence = 0 THEN 
				 INSERT INTO OBTENTIONDIPLOME VALUES(id_diplome, IDCAN_, MENTION_,DATEOBTENTION_);
			 END IF;
		 END IF;
	 END;
	/

CREATE OR REPLACE PROCEDURE INSERT_RELATION_LANG_CAN(
	-- On passe le nom du permis, la procédure se chargera de recuperer l'id
	 NOMLANGUE_ VARCHAR2, 
	 IDCAN_ VARCHAR2,
	 NIVEAU_ VARCHAR2
     ) AUTHID CURRENT_USER AS 

	 test_existence NUMBER(2);
	 BEGIN
		 IF NOMLANGUE_ IS NOT NULL AND IDCAN_ IS NOT NULL THEN
			-- On vérifie si le permis existe
			 SELECT COUNT(*) INTO test_existence FROM LANGUES WHERE NOMLANGUE = NOMLANGUE_;

			 IF test_existence = 0 THEN 
				-- Si la langue n'existe pas, on l'insère dans la base LANGUES
				 INSERT_LANGUES(NOMLANGUE_);
			 END IF;
			 
			-- Permet d'éviter l'insertion de doublons
			 SELECT COUNT(*) INTO test_existence FROM RELATION_LANG_CAN WHERE NOMLANGUE = NOMLANGUE_ AND IDCAN = IDCAN_;
			 IF test_existence = 0 THEN 
				-- On insère la relation qu'il existe entre le candidat et le permis
				 INSERT INTO RELATION_LANG_CAN VALUES(NOMLANGUE_, IDCAN_, NIVEAU_);
			 END IF;
		 END IF;
	 END;
	/

 
CREATE OR REPLACE PROCEDURE INSERT_SUIT_FORMATIONS(
	 NOMETASCO_ VARCHAR2,
	 NIVEAU_ VARCHAR2,
	 SPECIALITE_ VARCHAR2, 
	 IDCAN_ VARCHAR2,
	 DATEDEBUTFORM_ VARCHAR2,
	 DATEFINFORM_ VARCHAR2
     ) AUTHID CURRENT_USER AS 

	 test_existence NUMBER(2);
	 id_etaSco VARCHAR2(150);
	 id_form VARCHAR2(150);
	 BEGIN
		 IF NIVEAU_ IS NOT NULL AND SPECIALITE_ IS NOT NULL AND IDCAN_ IS NOT NULL THEN
			-- Récupération de l'identifiant de l'établissement scolaire
			 SELECT COUNT(*) INTO test_existence FROM ETABLISSEMENTSCOLAIRES WHERE (UTL_MATCH.jaro_winkler_similarity(NOMETASCO,NOMETASCO_) > 85 OR UTL_MATCH.edit_distance_similarity(NOMETASCO,NOMETASCO_) > 85) AND ROWNUM = 1;
			 IF test_existence = 0 THEN 
				-- Si l'établissement n'existe pas, on le crée
				 SELECT seq_etaSco.nextval INTO id_etaSco FROM DUAL;
				 INSERT_ETABLISSEMENTSCOLAIRES(id_etaSco, NULL, NOMETASCO_, NULL, NULL);
			 ELSE 
				 SELECT IDETASCO INTO id_etaSco FROM ETABLISSEMENTSCOLAIRES  WHERE (UTL_MATCH.jaro_winkler_similarity(NOMETASCO,NOMETASCO_) > 85 OR UTL_MATCH.edit_distance_similarity(NOMETASCO,NOMETASCO_) > 85) AND ROWNUM = 1;
			 END IF;
			 
			-- On vérifie si la formation existe
			 SELECT COUNT(*) INTO test_existence FROM FORMATIONS WHERE (UTL_MATCH.jaro_winkler_similarity(NIVEAU,NIVEAU_) > 85 OR UTL_MATCH.edit_distance_similarity(NIVEAU,NIVEAU_) > 85) AND (UTL_MATCH.jaro_winkler_similarity(SPECIALITE,SPECIALITE_) > 85 OR UTL_MATCH.edit_distance_similarity(SPECIALITE,SPECIALITE_) > 85) AND IDETASCO = id_etaSco AND ROWNUM = 1;
			 IF test_existence = 0 THEN 
				-- Si elle n'existe pas, on la crée
				 SELECT seq_form.nextval INTO id_form FROM DUAL;
				 INSERT_FORMATIONS(id_form,id_etaSco,NIVEAU_,SPECIALITE_);
			 ELSE 
				-- Sinon on recupère l'ID
				 SELECT IDFORM INTO id_form FROM FORMATIONS WHERE (UTL_MATCH.jaro_winkler_similarity(NIVEAU,NIVEAU_) > 85 OR UTL_MATCH.edit_distance_similarity(NIVEAU,NIVEAU_) > 85) AND (UTL_MATCH.jaro_winkler_similarity(SPECIALITE,SPECIALITE_) > 85 OR UTL_MATCH.edit_distance_similarity(SPECIALITE,SPECIALITE_) > 85) AND IDETASCO = id_etaSco AND ROWNUM = 1;
			 END IF;
			-- On insère la relation qu'il existe entre le candidat et le permis
			 
			-- Permet d'éviter l'insertion de doublons
			 SELECT COUNT(*) INTO test_existence FROM SUIT_FORMATIONS WHERE IDFORM = id_form AND IDCAN = IDCAN_;
			 IF test_existence = 0 THEN 
				 INSERT INTO SUIT_FORMATIONS VALUES(id_form, IDCAN_, DATEDEBUTFORM_,DATEDEBUTFORM_);
			 END IF;
		 END IF;
	 END;
	/
	

CREATE OR REPLACE PROCEDURE INSERT_RELATION_COMP_CAN(
	 NOMCPT_ VARCHAR2,
	 NOMCAT_CPT_ VARCHAR2,
	 IDCAN_ VARCHAR2
     ) AUTHID CURRENT_USER AS 

	 test_existence NUMBER(2);
	 NOMC_ VARCHAR2(150);
	 NOMCAT_ VARCHAR2(150);
	 BEGIN
		 IF NOMCPT_ IS NOT NULL AND IDCAN_ IS NOT NULL THEN
			 SELECT COUNT(*) INTO test_existence FROM COMPETENCES WHERE (UTL_MATCH.jaro_winkler_similarity(NOMCPT,NOMCPT_) > 85 OR UTL_MATCH.edit_distance_similarity(NOMCPT,NOMCPT_) > 85);
			 IF test_existence = 0 THEN 
				 INSERT_COMPETENCES(NOMCPT_,NOMCAT_CPT_);
				 NOMC_ := NOMCPT_;
				 NOMCAT_ := NOMCAT_CPT_;
			 ELSE 
				 SELECT NOMCPT INTO NOMC_ FROM COMPETENCES WHERE (UTL_MATCH.jaro_winkler_similarity(NOMCPT,NOMCPT_) > 85 OR UTL_MATCH.edit_distance_similarity(NOMCPT,NOMCPT_) > 85) AND ROWNUM = 1;
				 SELECT NOMCATEGORIE INTO NOMCAT_ FROM COMPETENCES WHERE NOMCPT = NOMC_ ;
			 END IF;
			 
			-- Permet d'éviter l'insertion de doublons
			 SELECT COUNT(*) INTO test_existence FROM RELATION_COMP_CAN WHERE (UTL_MATCH.jaro_winkler_similarity(NOMCPT,NOMCPT_) > 85 OR UTL_MATCH.edit_distance_similarity(NOMCPT,NOMCPT_) > 85) AND IDCAN = IDCAN_;
			 IF test_existence = 0 THEN 
				 INSERT INTO RELATION_COMP_CAN VALUES(NOMC_, IDCAN_);
			 END IF;
		 END IF;
	 END;
	/
	

CREATE OR REPLACE PROCEDURE INSERT_RELATION_CENTINT_CAN(
	 NOMCTRINT_ VARCHAR2,
	 IDCAN_ VARCHAR2
     ) AUTHID CURRENT_USER AS 

	 test_existence NUMBER(2);
	 NOMCI_ VARCHAR2(150);
	 
	 BEGIN
		 IF NOMCTRINT_ IS NOT NULL AND IDCAN_ IS NOT NULL THEN
			 SELECT COUNT(*) INTO test_existence FROM CENTREINTERET WHERE (UTL_MATCH.jaro_winkler_similarity(NOMCTRINT,NOMCTRINT_) > 85 OR UTL_MATCH.edit_distance_similarity(NOMCTRINT,NOMCTRINT_) > 85);
			 
			 IF test_existence = 0 THEN 
				 INSERT_CENTREINTERET(NOMCTRINT_);
				 NOMCI_ := NOMCTRINT_;
			 ELSE 
				 SELECT NOMCTRINT INTO NOMCI_ FROM CENTREINTERET WHERE (UTL_MATCH.jaro_winkler_similarity(NOMCTRINT,NOMCTRINT_) > 85 OR UTL_MATCH.edit_distance_similarity(NOMCTRINT,NOMCTRINT_) > 85) AND ROWNUM = 1;
			 END IF;
			 
			 -- Permet d'éviter l'insertion de doublons
			 SELECT COUNT(*) INTO test_existence FROM RELATION_CENTINT_CAN WHERE (UTL_MATCH.jaro_winkler_similarity(NOMCTRINT,NOMCTRINT_) > 85 OR UTL_MATCH.edit_distance_similarity(NOMCTRINT,NOMCTRINT_) > 85) AND IDCAN = IDCAN_;
			 IF test_existence = 0 THEN 
				 INSERT INTO RELATION_CENTINT_CAN VALUES(NOMCI_, IDCAN_);
			 END IF;
		 END IF;
	 END;
	/
	
	
	
	
	

CREATE OR REPLACE PROCEDURE INSERT_RELATION_EXP_CAN(
	 IDCAN_ VARCHAR2,
	 
	 NOMEXP_ VARCHAR2,
	 DESCRIPTIFEXP_ VARCHAR2,
	 DATEDEBUTEXP_ DATE,
	 DATEFINEXP_ DATE,
	 
	 NOMENT_ VARCHAR2,
	 MAILENT_ VARCHAR2,
	 TELENT_ VARCHAR2,
	 
	 NUMADR_ VARCHAR2,
	 LOCALITEADR_ VARCHAR2,
	 NOMRUEADR_ VARCHAR2,
	 CPADR_ VARCHAR2,
	 VILLEADR_ VARCHAR2,
	 PAYSADR_ VARCHAR2,
	 CONTINENTADR_ VARCHAR2
     ) AUTHID CURRENT_USER AS 

	 test_existence NUMBER(2);
	 id_adr VARCHAR2(150);
	 id_ent VARCHAR2(150);
	 id_exp VARCHAR2(150);

	 BEGIN
		 IF NOMEXP_ IS NOT NULL AND IDCAN_ IS NOT NULL THEN
			 SELECT COUNT(*) INTO test_existence FROM ENTREPRISES WHERE NOMENT = NOMENT_;
			 IF test_existence = 0 THEN 
			 	 SELECT seq_adr.nextval INTO id_adr FROM DUAL;
			     INSERT_ADRESSES(id_adr,NUMADR_,LOCALITEADR_,NOMRUEADR_,CPADR_,VILLEADR_,PAYSADR_,CONTINENTADR_);
				 
				 SELECT seq_ent.nextval INTO id_ent FROM DUAL;
				 INSERT_ENTREPRISES(id_ent,id_adr,NOMENT_,MAILENT_,TELENT_);
			 ELSE 
			 	 SELECT seq_ent.nextval INTO id_ent FROM DUAL;
			 END IF;
			 SELECT seq_exp.nextval INTO id_exp FROM DUAL;
			 INSERT_EXPERIENCES(id_exp,id_ent,NOMEXP_,DESCRIPTIFEXP_);
			 INSERT INTO RELATION_EXP_CAN VALUES(id_exp, IDCAN_, DATEDEBUTEXP_, DATEFINEXP_);
		 END IF;
	 END;
	/
	

CREATE OR REPLACE PROCEDURE INSERT_RELATION_PROJET_CAN(
	 IDCAN_ VARCHAR2,
	 
	 NOMPROJ_ VARCHAR2,
	 DESCRIPTIFPROJ_ VARCHAR2,
	 DATEDEBUTPROJ_ DATE,
	 DATEFINPROJ_ DATE,
	 
	 NOMETASCO_ VARCHAR2,
	 MAILETASCO_ VARCHAR2,
	 TELETASCO_ VARCHAR2,
	 
	 NUMADR_ VARCHAR2,
	 LOCALITEADR_ VARCHAR2,
	 NOMRUEADR_ VARCHAR2,
	 CPADR_ VARCHAR2,
	 VILLEADR_ VARCHAR2,
	 PAYSADR_ VARCHAR2,
	 CONTINENTADR_ VARCHAR2
     ) AUTHID CURRENT_USER AS 

	 test_existence NUMBER(2);
	 id_adr VARCHAR2(150);
	 id_proj VARCHAR2(150);
	 id_etaSco VARCHAR2(150);

	 BEGIN
		 IF NOMPROJ_ IS NOT NULL AND IDCAN_ IS NOT NULL THEN
			 SELECT COUNT(*) INTO test_existence FROM ETABLISSEMENTSCOLAIRES WHERE NOMETASCO = NOMETASCO_;
			 IF test_existence = 0 THEN 
			 	 SELECT seq_adr.nextval INTO id_adr FROM DUAL;
			     INSERT_ADRESSES(id_adr,NUMADR_,LOCALITEADR_,NOMRUEADR_,CPADR_,VILLEADR_,PAYSADR_,CONTINENTADR_);
				 
				 SELECT seq_etaSco.nextval INTO id_etaSco FROM DUAL;
				 INSERT_ETABLISSEMENTSCOLAIRES(id_etaSco,id_adr,NOMETASCO_,MAILETASCO_,TELETASCO_);
			 ELSE 
			 	 SELECT seq_etaSco.nextval INTO id_etaSco FROM DUAL;
			 END IF;
			 SELECT seq_proj.nextval INTO id_proj FROM DUAL;
			 INSERT_PROJETS(id_proj,id_etaSco,NOMPROJ_,DESCRIPTIFPROJ_);
			 INSERT INTO RELATION_PROJET_CAN VALUES(id_proj, IDCAN_, DATEDEBUTPROJ_, DATEFINPROJ_);
		 END IF;
	 END;
	/


CREATE OR REPLACE PROCEDURE INSERT_RELATION_EXP_MISS(

	 IDCAN_ VARCHAR2,
	 
	 NUMADR_ VARCHAR2,
	 LOCALITEADR_ VARCHAR2,
	 NOMRUEADR_ VARCHAR2,
	 CPADR_ VARCHAR2,
	 VILLEADR_ VARCHAR2,
	 PAYSADR_ VARCHAR2,
	 CONTINENTADR_ VARCHAR2,
	 
	 NOMENT_ VARCHAR2,
	 MAILENT_ VARCHAR2,
	 TELENT_ VARCHAR2,
	 
	 NOMEXP_ VARCHAR2,
	 DESCRIPTIFEXP_ VARCHAR2,
	 DATEDEBUTEXP_ DATE,
	 DATEFINEXP_ DATE,
	 	 	 
	 NOMMISSION_ VARCHAR2,
	 DESCRIPTIFMISSION_ VARCHAR2
	
     ) AUTHID CURRENT_USER AS 

	 test_existence NUMBER(2);
	 id_miss VARCHAR2(150);
	 id_exp VARCHAR2(150);
	 id_proj VARCHAR2(150);

	 BEGIN
		 IF NOMMISSION_ IS NOT NULL AND NOMEXP_ IS NOT NULL THEN
			 SELECT COUNT(*) INTO test_existence FROM MISSIONS WHERE NOMMISSION_ = NOMMISSION;
			 IF test_existence = 0 THEN 
			 	 SELECT seq_miss.nextval INTO id_miss FROM DUAL;
			     INSERT_MISSIONS(id_miss,NOMMISSION_,DESCRIPTIFMISSION_);
			 ELSE 
			 	 SELECT seq_miss.nextval INTO id_miss FROM DUAL;
			 END IF;
			 SELECT seq_proj.nextval INTO id_proj FROM DUAL;
			 INSERT_RELATION_EXP_CAN(IDCAN_,NOMEXP_,DESCRIPTIFEXP_,DATEDEBUTEXP_,DATEFINEXP_,NOMENT_,MAILENT_,TELENT_,NUMADR_,LOCALITEADR_ ,NOMRUEADR_,CPADR_,VILLEADR_,PAYSADR_,CONTINENTADR_);
			 SELECT seq_exp.currval INTO id_exp FROM DUAL;
			 INSERT INTO RELATION_EXP_MISS VALUES(id_exp, id_miss);
		 END IF;
	 END;
	/